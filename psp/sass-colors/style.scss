@import url("https://fonts.googleapis.com/css?family=Open + Sans:400, 700");

$color-psp--primary: #a90100;
$color-psp--secondary: #2c3e4f;
$color-psp--tertiary: #e3e8ec;
$color-psp--quaternary: #698bab;
$WatchstedColor: #d23b6b;

$color-psp--not-started: #bc8025;
$color-psp--incomplete: #7688c1;
$color-psp--cancelled: #777;

$color-grade-outstanding: #61b752;
$color-grade-good: #8b94b1;
$color-grade-requires-improvement: #f6bf58;
$color-grade-inadequate: #b46350;
$color-grade-not-graded: #aaaaaa;
$color-grade-teal: #5eb8c8;
$color-grade-purple: #8e6cbb;

$color-good: #559a47;
$color-bad: #b64638;
$color-average: #d6902e;
$color-informative: #3184d4;

$color-map: (
  brand: (
    primary: $color-psp--primary,
    secondary: $color-psp--secondary,
    tertiary: $color-psp--tertiary,
    quaternary: $color-psp--quaternary
  ),
  rag: (
    red: $color-bad,
    blue: $color-informative,
    amber: $color-average,
    green: $color-good,
    yellow: #fece25,
    purple: $color-grade-purple,
    white: darken(white, 3),
    black: black,
    teal: $color-grade-teal,
    pink: $WatchstedColor
  ),
  ofsted: (
    outstanding: $color-grade-outstanding,
    good: $color-grade-good,
    req: $color-grade-requires-improvement,
    inadequate: $color-grade-inadequate,
    no-grade: #aaa
  ),
  status: (
    not-started: $color-psp--not-started,
    incomplete: $color-psp--incomplete,
    cancelled: $color-psp--cancelled
  )
);

// retrieve color from map ie. `color(brand-color--primary, l50)`
@function color($color-name, $color-variant: null) {
  // color variant is optional
  @if ($color-variant != null) {
    // map inception
    @return map-get(map-get($color-map-expanded, $color-name), $color-variant);
  } @else {
    @return map-get($color-map-expanded, $color-name);
  }
}

@function generate-map($map) {
  $result-map: () !default;
  @each $item, $colors in $map {
    @each $color-name, $value in $colors {
      $result-map: map-merge(
        $result-map,
        (
          #{$item}--#{$color-name}:
            (
              l90: mix(white, $value, 90%),
              l80: mix(white, $value, 80%),
              l70: mix(white, $value, 70%),
              l60: mix(white, $value, 60%),
              l50: mix(white, $value, 50%),
              l40: mix(white, $value, 40%),
              l30: mix(white, $value, 30%),
              l20: mix(white, $value, 20%),
              l10: mix(white, $value, 10%),
              base: $value,
              d10: mix(black, $value, 10%),
              d20: mix(black, $value, 20%),
              d30: mix(black, $value, 30%),
              d40: mix(black, $value, 40%),
              d50: mix(black, $value, 50%),
              d60: mix(black, $value, 60%),
              d70: mix(black, $value, 70%),
              d80: mix(black, $value, 80%),
              d90: mix(black, $value, 90%)
            )
        )
      );
    }
  }
  @return $result-map;
}

$color-map-expanded: generate-map($color-map);

@each $name, $color in $color-map-expanded {
  .#{$name} {
    color: color(#{$name}, base);
  }

  @for $i from 1 through 9 {
    $num: $i * 10;

    .#{$name}-l#{$num} {
      color: color(#{$name}, #{l + $num});
    }

    .#{$name}-d#{$num} {
      color: color(#{$name}, #{d + $num});
    }
  }
}

body {
  background-color: color(brand--quaternary, d70);
  font-family: "Open Sans", sans-serif;
  text-align: center;
  color: white;
  line-height: 1.5;
  font-size: 18px;
  word-spacing: 0.125em;
}

h2 {
  line-height: 1;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
}

span {
  display: inline-block;
  margin-right: 5px;
  font-size: 58px;
}

p {
  color: color(brand--quaternary, l70);
}
